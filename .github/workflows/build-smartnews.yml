name: Fetch and Clean RSS Feed

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  fetch:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: |
          pip install lxml requests beautifulsoup4
      
      - name: Fetch and Clean RSS Feed
        run: |
          python3 << 'EOF'
          import requests
          from lxml import etree
          from bs4 import BeautifulSoup
          from datetime import datetime, timezone
          import re
          from urllib.parse import quote
          import html as html_lib

          print("Fetching original feed...")
          response = requests.get('https://www.cabletv.com/feed')
          root = etree.fromstring(response.content)
          channel = root.find('channel')
          items = channel.findall('item')[:8]
          
          nsmap = {
              'content': 'http://purl.org/rss/1.0/modules/content/',
              'wfw': 'http://wellformedweb.org/CommentAPI/',
              'dc': 'http://purl.org/dc/elements/1.1/',
              'atom': 'http://www.w3.org/2005/Atom',
              'sy': 'http://purl.org/rss/1.0/modules/syndication/',
              'slash': 'http://purl.org/rss/1.0/modules/slash/',
              'media': 'http://search.yahoo.com/mrss/',
              'snf': 'http://www.smartnews.be/snf'
          }
          
          for prefix, uri in nsmap.items():
              etree.register_namespace(prefix, uri)
          
          fallback_thumbnail = 'https://ctv-clearlink.github.io/RSS-Feed/CableTV.com%20RSS%20Logo%20Header.png'
          logo_url = 'https://ctv-clearlink.github.io/RSS-Feed/CableTV.com%20RSS%20Logo%20Header.png'
          
          # Build XML
          xml_parts = []
          xml_parts.append('<?xml version="1.0" encoding="UTF-8"?>')
          xml_parts.append('<rss version="2.0"')
          xml_parts.append(' xmlns:content="http://purl.org/rss/1.0/modules/content/"')
          xml_parts.append(' xmlns:wfw="http://wellformedweb.org/CommentAPI/"')
          xml_parts.append(' xmlns:dc="http://purl.org/dc/elements/1.1/"')
          xml_parts.append(' xmlns:atom="http://www.w3.org/2005/Atom"')
          xml_parts.append(' xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"')
          xml_parts.append(' xmlns:slash="http://purl.org/rss/1.0/modules/slash/"')
          xml_parts.append(' xmlns:media="http://search.yahoo.com/mrss/"')
          xml_parts.append(' xmlns:snf="http://www.smartnews.be/snf">')
          xml_parts.append('<channel>')
          
          # Add logo first
          xml_parts.append(f'<snf:logo><url>{logo_url}</url></snf:logo>')
          
          # Add channel metadata
          for elem in channel:
              if elem.tag == 'item':
                  break
              if 'logo' not in elem.tag.lower():
                  xml_parts.append(etree.tostring(elem, encoding='unicode', method='xml'))
          
          cdata_count = 0
          
          def scrape_full_article(article_url):
              """Scrape the FULL article content, title, and featured image from the page"""
              try:
                  headers = {
                      'User-Agent': 'Mozilla/5.0 (compatible; SmartFeed-Builder/3.0)',
                      'Accept': 'text/html'
                  }
                  response = requests.get(article_url, headers=headers, timeout=15)
                  if not response.ok:
                      return None, None, None
                  
                  html_content = response.text
                  soup = BeautifulSoup(html_content, 'html.parser')
                  
                  # Get FULL title from og:title or page title
                  full_title = None
                  og_title_match = re.search(r'<meta[^>]+property=["\']og:title["\'][^>]+content=["\']([^"\']+)["\']', html_content, re.IGNORECASE)
                  if og_title_match:
                      full_title = html_lib.unescape(og_title_match.group(1))
                  
                  if not full_title:
                      title_tag = soup.find('title')
                      if title_tag:
                          full_title = html_lib.unescape(title_tag.get_text())
                          full_title = re.sub(r'\s*[-|]\s*CableTV\.com.*$', '', full_title, flags=re.IGNORECASE)
                  
                  # Get featured image
                  featured_image = None
                  candidates = []
                  
                  og_matches = re.findall(r'<meta[^>]+property=["\']og:image["\'][^>]+content=["\']([^"\']+)["\']', html_content, re.IGNORECASE)
                  candidates.extend(og_matches)
                  
                  for img_url in candidates:
                      filename = img_url.lower().split('/')[-1]
                      if 'logo' in filename or 'icon' in filename:
                          continue
                      if any(size in img_url.lower() for size in ['150x150', '100x100']):
                          continue
                      if 'watch-' in filename or filename.endswith('.webp'):
                          featured_image = img_url
                          break
                      if not featured_image:
                          featured_image = img_url
                  
                  if not featured_image and candidates:
                      featured_image = candidates[0]
                  
                  # Extract FULL article content from the main article body
                  article_body = soup.find('article') or soup.find('div', class_=re.compile(r'(entry-content|article-content|post-content|main-content)', re.I))
                  
                  if article_body:
                      # Remove unwanted elements before getting content
                      for unwanted in article_body.find_all(['script', 'style', 'nav', 'footer', 'aside']):
                          unwanted.decompose()
                      
                      # Remove ads and CTAs with affiliate links
                      for div in article_body.find_all('div', class_=re.compile(r'(vc_btn|button|cta|promo)', re.I)):
                          if div.find('a', href=re.compile(r'(aff_c|affiliate|go\.cabletv)', re.I)):
                              div.decompose()
                      
                      # Remove newsletter/subscribe blocks
                      for elem in article_body.find_all(['div', 'section'], class_=re.compile(r'(newsletter|subscribe|signup|email)', re.I)):
                          elem.decompose()
                      
                      # Remove social share buttons
                      for elem in article_body.find_all(['div', 'section'], class_=re.compile(r'(share|social)', re.I)):
                          elem.decompose()
                      
                      # Limit links to first 3
                      links = article_body.find_all('a')
                      if len(links) > 3:
                          for link in links[3:]:
                              link.unwrap()
                      
                      full_content = str(article_body)
                      return full_title, featured_image, full_content
                  
                  return full_title, featured_image, None
                  
              except Exception as e:
                  print(f"    ! Error scraping article: {e}")
                  return None, None, None
          
          for idx, item in enumerate(items):
              article_link = None
              
              # Get article link
              for elem in item:
                  if elem.tag == 'link':
                      article_link = elem.text.split('?')[0] if elem.text else None
                      break
              
              # Scrape FULL article content from the page
              full_title = None
              featured_image = None
              full_article_content = None
              
              if article_link:
                  print(f"\nItem {idx+1}: Scraping {article_link}")
                  full_title, featured_image, full_article_content = scrape_full_article(article_link)
                  
                  if full_title:
                      print(f"  ✓ Title: {full_title}")
                  if full_article_content:
                      print(f"  ✓ Full content: {len(full_article_content)} chars")
                  else:
                      print(f"  ! Could not extract full content")
              
              # Fallback to RSS title if needed
              if not full_title:
                  title_elem = item.find('title')
                  full_title = title_elem.text if title_elem is not None else 'Unknown'
                  full_title = re.sub(r'\[current_date[^\]]*\]', str(datetime.now().year), full_title)
                  full_title = re.sub(r'\[[^\]]+\]', '', full_title)
                  full_title = re.sub(r'\s+', ' ', full_title).strip()
              
              # Fallback to RSS content if scraping failed
              if not full_article_content:
                  print(f"  ! Using RSS content as fallback")
                  for elem in item:
                      tag_name = etree.QName(elem.tag).localname if '}' in elem.tag else elem.tag
                      namespace = etree.QName(elem.tag).namespace if '}' in elem.tag else None
                      
                      if namespace == 'http://purl.org/rss/1.0/modules/content/' and tag_name == 'encoded':
                          full_article_content = elem.text or ''
                          break
              
              xml_parts.append('<item>')
              
              # Process RSS elements (skip title, content, and thumbnail - we have better versions)
              for elem in item:
                  tag_name = etree.QName(elem.tag).localname if '}' in elem.tag else elem.tag
                  namespace = etree.QName(elem.tag).namespace if '}' in elem.tag else None
                  
                  # Skip these - we'll add our own
                  if elem.tag == 'title':
                      continue
                  if namespace == 'http://purl.org/rss/1.0/modules/content/' and tag_name == 'encoded':
                      continue
                  if namespace == 'http://search.yahoo.com/mrss/':
                      continue
                  
                  xml_parts.append(etree.tostring(elem, encoding='unicode', method='xml'))
              
              # Add our scraped title
              xml_parts.append(f'<title><![CDATA[{full_title}]]></title>')
              
              # Add FULL article content
              if full_article_content:
                  xml_parts.append(f'<content:encoded><![CDATA[{full_article_content}]]></content:encoded>')
                  cdata_count += 1
              
              # Add required fields
              if item.find('dc:creator', nsmap) is None:
                  xml_parts.append('<dc:creator>CableTV.com</dc:creator>')
              
              if item.find('pubDate') is None:
                  xml_parts.append(f'<pubDate>{datetime.now(timezone.utc).strftime("%a, %d %b %Y %H:%M:%S +0000")}</pubDate>')
              
              # Add featured image
              if not featured_image:
                  featured_image = fallback_thumbnail
              
              if not featured_image.startswith('http'):
                  if featured_image.startswith('//'):
                      featured_image = 'https:' + featured_image
                  elif featured_image.startswith('/'):
                      featured_image = 'https://www.cabletv.com' + featured_image
              
              featured_image = featured_image.replace('&', '&amp;')
              
              xml_parts.append(f'<media:thumbnail url="{featured_image}"/>')
              xml_parts.append('</item>')
          
          xml_parts.append('</channel></rss>')
          xml_string = ''.join(xml_parts).replace('https://www.cabletv.com/feed', 'https://ctv-clearlink.github.io/RSS-Feed/feed.xml')
          
          with open('feed.xml', 'w', encoding='utf-8') as f:
              f.write(xml_string)
          
          print(f"\n✓ Feed created with {cdata_count} CDATA sections")
          print(f"✓ FULL article content scraped from pages")
          print(f"✓ Output size: {len(xml_string):,} bytes ({len(xml_string)/1024/1024:.2f} MB)")
          EOF
      
      - name: Check for changes
        id: changes
        run: |
          git diff --quiet feed.xml || echo "changed=true" >> $GITHUB_OUTPUT
      
      - name: Commit and push feed
        if: steps.changes.outputs.changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add feed.xml
          git commit -m "Update RSS feed $(date '+%Y-%m-%d %H:%M:%S')"
          git pull --rebase origin main
          git push origin main
