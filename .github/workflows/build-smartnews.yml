name: Fetch and Clean RSS Feed

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  fetch:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: |
          pip install lxml requests beautifulsoup4
      
      - name: Fetch and Clean RSS Feed
        run: |
          python3 << 'EOF'
          import requests
          from lxml import etree
          from bs4 import BeautifulSoup
          from datetime import datetime, timezone
          import re
          import time

          response = requests.get('https://www.cabletv.com/feed')
          root = etree.fromstring(response.content)
          channel = root.find('channel')
          items = channel.findall('item')[:8]
          
          nsmap = {
              'content': 'http://purl.org/rss/1.0/modules/content/',
              'dc': 'http://purl.org/dc/elements/1.1/',
              'media': 'http://search.yahoo.com/mrss/',
              'snf': 'http://www.smartnews.be/snf'
          }
          
          for prefix, uri in nsmap.items():
              etree.register_namespace(prefix, uri)
          
          fallback = 'https://ctv-clearlink.github.io/RSS-Feed/CableTV.com%20RSS%20Logo%20Header.png'
          
          xml_parts = []
          xml_parts.append('<?xml version="1.0" encoding="UTF-8"?>')
          xml_parts.append('<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:snf="http://www.smartnews.be/snf">')
          xml_parts.append('<channel>')
          xml_parts.append(f'<snf:logo><url>{fallback}</url></snf:logo>')
          
          for elem in channel:
              if elem.tag == 'item':
                  break
              if 'logo' not in elem.tag.lower():
                  xml_parts.append(etree.tostring(elem, encoding='unicode'))
          
          for idx, item in enumerate(items):
              link = item.find('link').text.strip().split('?')[0]
              print(f"\n{idx+1}. {link}")
              
              # Fetch page and extract EVERYTHING
              title = None
              image = None
              full_content = None
              
              try:
                  r = requests.get(link, headers={'User-Agent': 'Mozilla/5.0'}, timeout=15)
                  soup = BeautifulSoup(r.text, 'html.parser')
                  
                  # Get title from og:title meta tag
                  meta_title = soup.find('meta', property='og:title')
                  if meta_title and meta_title.get('content'):
                      title = meta_title['content']
                      print(f"  Title: {title}")
                  
                  # Get image from og:image
                  meta_image = soup.find('meta', property='og:image')
                  if meta_image and meta_image.get('content'):
                      img = meta_image['content']
                      if 'logo' not in img.lower():
                          image = img
                          print(f"  Image: {img.split('/')[-1]}")
                  
                  # Get FULL article content
                  article_tag = soup.find('article')
                  if article_tag:
                      # Remove unwanted tags
                      for tag in article_tag.find_all(['script', 'style', 'nav', 'footer', 'header']):
                          tag.decompose()
                      # Remove forms
                      for form in article_tag.find_all('form'):
                          form.decompose()
                      
                      full_content = str(article_tag)
                      print(f"  Content: {len(full_content)} chars")
                  
                  time.sleep(0.3)
              except Exception as e:
                  print(f"  Error: {e}")
              
              # Fallbacks
              if not title:
                  title = item.find('title').text
              if not image:
                  image = fallback
              if not full_content:
                  # Use RSS content as absolute fallback
                  for elem in item:
                      if elem.tag == '{http://purl.org/rss/1.0/modules/content/}encoded':
                          full_content = elem.text or ''
                          break
              
              # Build XML for this item
              xml_parts.append('<item>')
              xml_parts.append(f'<title><![CDATA[{title}]]></title>')
              
              # Add all other RSS elements except title, content, and media
              for elem in item:
                  tag = elem.tag
                  if tag == 'title':
                      continue
                  if tag == '{http://purl.org/rss/1.0/modules/content/}encoded':
                      continue
                  if '{http://search.yahoo.com/mrss/}' in tag:
                      continue
                  xml_parts.append(etree.tostring(elem, encoding='unicode'))
              
              # Add the FULL content
              xml_parts.append(f'<content:encoded><![CDATA[{full_content}]]></content:encoded>')
              
              # Add missing fields
              if item.find('{http://purl.org/dc/elements/1.1/}creator') is None:
                  xml_parts.append('<dc:creator>CableTV.com</dc:creator>')
              if item.find('pubDate') is None:
                  xml_parts.append(f'<pubDate>{datetime.now(timezone.utc).strftime("%a, %d %b %Y %H:%M:%S +0000")}</pubDate>')
              
              # Add image
              xml_parts.append(f'<media:thumbnail url="{image}"/>')
              xml_parts.append('</item>')
          
          xml_parts.append('</channel></rss>')
          
          xml_string = ''.join(xml_parts)
          xml_string = xml_string.replace('https://www.cabletv.com/feed', 'https://ctv-clearlink.github.io/RSS-Feed/feed.xml')
          
          with open('feed.xml', 'w', encoding='utf-8') as f:
              f.write(xml_string)
          
          print(f"\nDone: {len(xml_string):,} bytes")
          EOF
      
      - name: Check for changes
        id: changes
        run: |
          git diff --quiet feed.xml || echo "changed=true" >> $GITHUB_OUTPUT
      
      - name: Commit and push feed
        if: steps.changes.outputs.changed == 'true'
        run: |
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git add feed.xml
          git commit -m "Update feed"
          git pull --rebase origin main
          git push origin main
