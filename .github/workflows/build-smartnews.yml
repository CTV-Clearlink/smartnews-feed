name: Fetch and Clean RSS Feed

on:
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

jobs:
  fetch:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: |
          pip install lxml requests beautifulsoup4
      
      - name: Fetch and Clean RSS Feed
        run: |
          python3 << 'EOF'
          import requests
          from lxml import etree
          from bs4 import BeautifulSoup
          from datetime import datetime, timezone
          import re
          from urllib.parse import quote

          print("Fetching original feed...")
          response = requests.get('https://www.cabletv.com/feed')
          root = etree.fromstring(response.content)
          channel = root.find('channel')
          items = channel.findall('item')[:8]
          
          nsmap = {
              'content': 'http://purl.org/rss/1.0/modules/content/',
              'wfw': 'http://wellformedweb.org/CommentAPI/',
              'dc': 'http://purl.org/dc/elements/1.1/',
              'atom': 'http://www.w3.org/2005/Atom',
              'sy': 'http://purl.org/rss/1.0/modules/syndication/',
              'slash': 'http://purl.org/rss/1.0/modules/slash/',
              'media': 'http://search.yahoo.com/mrss/',
              'snf': 'http://www.smartnews.be/snf'
          }
          
          for prefix, uri in nsmap.items():
              etree.register_namespace(prefix, uri)
          
          fallback_thumbnail = 'https://ctv-clearlink.github.io/RSS-Feed/CableTV.com%20RSS%20Logo%20Header.png'
          logo_url = 'https://ctv-clearlink.github.io/RSS-Feed/CableTV.com%20RSS%20Logo%20Header.png'
          
          # Build XML
          xml_parts = []
          xml_parts.append('<?xml version="1.0" encoding="UTF-8"?>')
          xml_parts.append('<rss version="2.0"')
          xml_parts.append(' xmlns:content="http://purl.org/rss/1.0/modules/content/"')
          xml_parts.append(' xmlns:wfw="http://wellformedweb.org/CommentAPI/"')
          xml_parts.append(' xmlns:dc="http://purl.org/dc/elements/1.1/"')
          xml_parts.append(' xmlns:atom="http://www.w3.org/2005/Atom"')
          xml_parts.append(' xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"')
          xml_parts.append(' xmlns:slash="http://purl.org/rss/1.0/modules/slash/"')
          xml_parts.append(' xmlns:media="http://search.yahoo.com/mrss/"')
          xml_parts.append(' xmlns:snf="http://www.smartnews.be/snf">')
          xml_parts.append('<channel>')
          
          # Add logo first
          xml_parts.append(f'<snf:logo><url>{logo_url}</url></snf:logo>')
          
          # Add channel metadata
          for elem in channel:
              if elem.tag == 'item':
                  break
              if 'logo' not in elem.tag.lower():
                  xml_parts.append(etree.tostring(elem, encoding='unicode', method='xml'))
          
          cdata_count = 0
          
          def clean_title(title):
              """Clean up title - remove shortcodes and fix missing words"""
              if not title:
                  return title
              # Remove shortcodes like [current_date format="mm yy"]
              title = re.sub(r'\[current_date[^\]]*\]', str(datetime.now().year), title)
              title = re.sub(r'\[[^\]]+\]', '', title)
              # Clean up extra spaces
              title = re.sub(r'\s+', ' ', title).strip()
              return title
          
          def clean_content(html):
              """Remove ads, promos, and unnecessary elements from content"""
              if not html:
                  return html
              
              soup = BeautifulSoup(html, 'html.parser')
              
              # Remove DirecTV/affiliate ads at top
              # Look for divs with button/CTA classes that contain affiliate links
              for div in soup.find_all('div', class_=re.compile(r'(vc_btn|button|cta|promo)', re.I)):
                  if div.find('a', href=re.compile(r'(aff_c|affiliate|go\.cabletv)', re.I)):
                      div.decompose()
              
              # Remove newsletter signup promos
              for elem in soup.find_all(['div', 'section', 'aside'], class_=re.compile(r'(newsletter|subscribe|signup|email-form)', re.I)):
                  elem.decompose()
              
              # Remove any "subscribe" or "newsletter" text blocks
              for elem in soup.find_all(string=re.compile(r'(subscribe|newsletter|sign up|email)', re.I)):
                  parent = elem.parent
                  if parent and parent.name in ['p', 'div', 'span']:
                      # Check if it's a newsletter promo
                      text = parent.get_text().lower()
                      if 'newsletter' in text or 'subscribe' in text:
                          parent.decompose()
              
              # Remove social share buttons
              for elem in soup.find_all(['div', 'section'], class_=re.compile(r'(share|social)', re.I)):
                  elem.decompose()
              
              # Remove "related articles" sections
              for elem in soup.find_all(['div', 'section', 'aside'], class_=re.compile(r'(related|similar|recommended)', re.I)):
                  elem.decompose()
              
              # Remove navigation, footer, header
              for tag in soup.find_all(['nav', 'footer', 'header', 'aside']):
                  tag.decompose()
              
              # Remove scripts and styles
              for tag in soup.find_all(['script', 'style']):
                  tag.decompose()
              
              # Limit number of links (keep only first 3)
              links = soup.find_all('a')
              if len(links) > 3:
                  for link in links[3:]:
                      link.unwrap()
              
              return str(soup)
          
          def fetch_featured_image(article_url):
              """Fetch the featured image from the article page"""
              try:
                  headers = {
                      'User-Agent': 'Mozilla/5.0 (compatible; SmartFeed-Builder/3.0)',
                      'Accept': 'text/html'
                  }
                  response = requests.get(article_url, headers=headers, timeout=10)
                  if not response.ok:
                      return None
                  
                  html = response.text
                  candidates = []
                  
                  # Look for og:image, twitter:image, article:image
                  og_matches = re.findall(r'<meta[^>]+property=["\']og:image["\'][^>]+content=["\']([^"\']+)["\']', html, re.IGNORECASE)
                  candidates.extend(og_matches)
                  
                  twitter_matches = re.findall(r'<meta[^>]+name=["\']twitter:image["\'][^>]+content=["\']([^"\']+)["\']', html, re.IGNORECASE)
                  candidates.extend(twitter_matches)
                  
                  article_matches = re.findall(r'<meta[^>]+property=["\']article:image["\'][^>]+content=["\']([^"\']+)["\']', html, re.IGNORECASE)
                  candidates.extend(article_matches)
                  
                  # Filter and select best image
                  for img_url in candidates:
                      filename = img_url.lower().split('/')[-1]
                      
                      if 'logo' in filename or 'icon' in filename:
                          continue
                      if any(size in img_url.lower() for size in ['150x150', '100x100', '50x50']):
                          continue
                      if 'watch-' in filename or filename.endswith('.webp'):
                          return img_url
                      return img_url
                  
                  if candidates:
                      return candidates[0]
                  
                  return None
              except Exception as e:
                  print(f"    ! Error: {e}")
              return None
          
          for idx, item in enumerate(items):
              title_elem = item.find('title')
              title_text = title_elem.text if title_elem is not None else 'Unknown'
              
              # Clean the title
              cleaned_title = clean_title(title_text)
              print(f"\nItem {idx+1}: {cleaned_title[:50]}")
              
              xml_parts.append('<item>')
              
              original_content = None
              article_link = None
              
              # Get link and content
              for elem in item:
                  if elem.tag == 'link':
                      article_link = elem.text.split('?')[0] if elem.text else None
                  
                  tag_name = etree.QName(elem.tag).localname if '}' in elem.tag else elem.tag
                  namespace = etree.QName(elem.tag).namespace if '}' in elem.tag else None
                  
                  if namespace == 'http://purl.org/rss/1.0/modules/content/' and tag_name == 'encoded':
                      original_content = elem.text or ''
              
              # Process elements
              for elem in item:
                  tag_name = etree.QName(elem.tag).localname if '}' in elem.tag else elem.tag
                  namespace = etree.QName(elem.tag).namespace if '}' in elem.tag else None
                  
                  # Skip existing thumbnails
                  if namespace == 'http://search.yahoo.com/mrss/':
                      continue
                  
                  # Replace title with cleaned version
                  if elem.tag == 'title':
                      xml_parts.append(f'<title><![CDATA[{cleaned_title}]]></title>')
                  # Clean content
                  elif namespace == 'http://purl.org/rss/1.0/modules/content/' and tag_name == 'encoded':
                      if original_content:
                          # Clean the content - remove ads, promos, etc.
                          cleaned_content = clean_content(original_content)
                          
                          # DO NOT truncate - include full content
                          xml_parts.append(f'<content:encoded><![CDATA[{cleaned_content}]]></content:encoded>')
                          cdata_count += 1
                          print(f"  Content length: {len(cleaned_content)} chars (full article)")
                  else:
                      xml_parts.append(etree.tostring(elem, encoding='unicode', method='xml'))
              
              # Add required fields
              if item.find('dc:creator', nsmap) is None:
                  xml_parts.append('<dc:creator>CableTV.com</dc:creator>')
              
              if item.find('pubDate') is None:
                  xml_parts.append(f'<pubDate>{datetime.now(timezone.utc).strftime("%a, %d %b %Y %H:%M:%S +0000")}</pubDate>')
              
              # Fetch featured image
              featured_image = None
              if article_link:
                  featured_image = fetch_featured_image(article_link)
              
              if not featured_image:
                  featured_image = fallback_thumbnail
              
              if not featured_image.startswith('http'):
                  if featured_image.startswith('//'):
                      featured_image = 'https:' + featured_image
                  elif featured_image.startswith('/'):
                      featured_image = 'https://www.cabletv.com' + featured_image
              
              featured_image = featured_image.replace('&', '&amp;')
              
              xml_parts.append(f'<media:thumbnail url="{featured_image}"/>')
              xml_parts.append('</item>')
          
          xml_parts.append('</channel></rss>')
          xml_string = ''.join(xml_parts).replace('https://www.cabletv.com/feed', 'https://ctv-clearlink.github.io/RSS-Feed/feed.xml')
          
          with open('feed.xml', 'w', encoding='utf-8') as f:
              f.write(xml_string)
          
          print(f"\n✓ Feed created with {cdata_count} CDATA sections")
          print(f"✓ Full article content included (not truncated)")
          print(f"✓ Output size: {len(xml_string):,} bytes")
          EOF
      
      - name: Check for changes
        id: changes
        run: |
          git diff --quiet feed.xml || echo "changed=true" >> $GITHUB_OUTPUT
      
      - name: Commit and push feed
        if: steps.changes.outputs.changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add feed.xml
          git commit -m "Update RSS feed $(date '+%Y-%m-%d %H:%M:%S')"
          git pull --rebase origin main
          git push origin main
